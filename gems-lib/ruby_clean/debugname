Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is -12
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 0
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 0
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 12
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is -11
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 1
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 1
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 13
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is -10
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 2
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 2
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 14
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is -9
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 3
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 3
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 15
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is -8
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 4
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 4
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 16
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is -7
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 5
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 5
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 17
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 0
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 6
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 12
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 18
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 1
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 6
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 13
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 18
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 2
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 6
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 14
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 18
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 3
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 6
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 15
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 18
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 4
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 7
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 16
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 19
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 5
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 7
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 17
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 19
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 6
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 8
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 18
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 20
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 7
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 8
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 19
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 20
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 8
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 9
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 20
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 21
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 1  - 1 1  - 0 0  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 8
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is 10
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 20
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 22
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 0 0  - 0 0  - 1 1  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 9
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is -6
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 21
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 6
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 1 0  - 0 0  - 0 0  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 9
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is -5
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 21
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 7
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 0 1  - 0 0  - 0 0  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 9
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is -4
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 21
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 8
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 0 0  - 1 0  - 0 0  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 9
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is -3
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 21
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 9
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 0 0  - 0 1  - 0 0  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 10
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is -2
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 22
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 10
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 0 0  - 0 0  - 1 0  - ]

Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:867: returning shortest path
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:868: (src-(2*max_machines)) is 10
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:869: (next-(2*max_machines)) is -1
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:870: src is 22
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:871: next is 11
Debug: in fn NetDest shortest_path_to_node(SwitchID, SwitchID, const Matrix&, const Matrix&) in network/simple/Topology.C:872: result is [NetDest (3) 0 0  - 0 0  - 0 1  - ]

Debug: in fn bool Sequencer::doRequest(const CacheMsg&) in system/Sequencer.C:911: Fast path miss
      1   0  -1        Seq               Begin       >       [0x400, line 0x400] LD
      5   0   0    L1Cache                Load     NP>IS     [0x400, line 0x400] 
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=5 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 2 enqueuing net msg from inport[0][0] to outport [0][0] time: 75.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 76.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [77, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=5 ]]; ], ]] [Queue from port 6 2 0 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 6
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=5 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 6 enqueuing net msg from inport[2][0] to outport [0][0] time: 77.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 78.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [79, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=5 ]]; ], ]] [Queue from port 8 0 0 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=5 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[0][0] to outport [0][0] time: 79.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 80.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [81, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=5 ]]; ], ]] [Queue from port 9 0 0 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 9
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=5 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 0  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 1  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 9 enqueuing net msg from inport[0][0] to outport [0][0] time: 81.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 82.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [83, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=5 ]]; ], ]] [Chip 0 0, L2Cache, L1RequestToL2Cache]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
     83   0   0    L2Cache             L1_GETS     NP>ISS    [0x400, line 0x400] [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L2Cache-0 Destination=[NetDest (3) 0 0  - 0 0  - 1 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=83 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 0 enqueuing net msg from inport[0][2] to outport [0][2] time: 87.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 88.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [89, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L2Cache-0 Destination=[NetDest (3) 0 0  - 0 0  - 1 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=83 ]]; ], ]] [Queue from port 6 0 2 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 6
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L2Cache-0 Destination=[NetDest (3) 0 0  - 0 0  - 1 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=83 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 6 enqueuing net msg from inport[0][2] to outport [0][2] time: 89.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 90.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [91, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L2Cache-0 Destination=[NetDest (3) 0 0  - 0 0  - 1 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=83 ]]; ], ]] [Queue from port 8 0 2 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L2Cache-0 Destination=[NetDest (3) 0 0  - 0 0  - 1 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=83 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 1
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[0][2] to outport [1][2] time: 91.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 1 my bw 10000 bw spent enqueueing net msg 8000 time: 92.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [93, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L2Cache-0 Destination=[NetDest (3) 0 0  - 0 0  - 1 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=83 ]]; ], ]] [Queue from port 10 0 2 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 8 1 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 10
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L2Cache-0 Destination=[NetDest (3) 0 0  - 0 0  - 1 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=83 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 0 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 10 enqueuing net msg from inport[0][2] to outport [0][2] time: 93.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 94.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [95, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETS AccessMode=UserMode Requestor=L2Cache-0 Destination=[NetDest (3) 0 0  - 0 0  - 1 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=83 ]]; ], ]] [Chip 0 0, Directory, requestToDir]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 10 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
     95   0   0  Directory               Fetch      I>I      [0x400, line 0x400] 
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=MEMORY_DATA Sender=Directory-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=19039480 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=95 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 4 enqueuing net msg from inport[0][3] to outport [0][3] time: 96.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 97.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [98, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=MEMORY_DATA Sender=Directory-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=19039480 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=95 ]]; ], ]] [Queue from port 7 0 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 7
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=MEMORY_DATA Sender=Directory-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=19039480 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=95 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 7 enqueuing net msg from inport[0][3] to outport [0][3] time: 98.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 99.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [100, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=MEMORY_DATA Sender=Directory-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=19039480 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=95 ]]; ], ]] [Queue from port 8 1 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 1
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=MEMORY_DATA Sender=Directory-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=19039480 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=95 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[1][3] to outport [0][3] time: 100.

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 101.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [102, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=MEMORY_DATA Sender=Directory-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=19039480 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=95 ]]; ], ]] [Queue from port 9 0 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 9
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=MEMORY_DATA Sender=Directory-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=19039480 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=95 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 0  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 1  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 9 enqueuing net msg from inport[0][3] to outport [0][3] time: 102.

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 103.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [104, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=MEMORY_DATA Sender=Directory-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=19039480 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=95 ]]; ], ]] [Chip 0 0, L2Cache, responseToL2Cache]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
    104   0   0    L2Cache            Mem_Data    ISS>MT_MB  [0x400, line 0x400] 
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=DATA_EXCLUSIVE Sender=L2Cache-0 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=104 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 0 enqueuing net msg from inport[0][3] to outport [0][3] time: 105.

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 106.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [107, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=DATA_EXCLUSIVE Sender=L2Cache-0 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=104 ]]; ], ]] [Queue from port 6 0 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 6
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=DATA_EXCLUSIVE Sender=L2Cache-0 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=104 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 6 enqueuing net msg from inport[0][3] to outport [0][3] time: 107.

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 108.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [109, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=DATA_EXCLUSIVE Sender=L2Cache-0 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=104 ]]; ], ]] [Queue from port 8 0 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=DATA_EXCLUSIVE Sender=L2Cache-0 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=104 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[0][3] to outport [0][3] time: 109.

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 4 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 7 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 114.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [115, 2, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=DATA_EXCLUSIVE Sender=L2Cache-0 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=104 ]]; ], ]] [Queue from port 9 0 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 9
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=DATA_EXCLUSIVE Sender=L2Cache-0 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=104 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 0  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 1  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 9 enqueuing net msg from inport[0][3] to outport [2][3] time: 115.

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again

Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 2 my bw 10000 bw spent enqueueing net msg 136000 time: 116.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [117, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=DATA_EXCLUSIVE Sender=L2Cache-0 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=104 ]]; ], ]] [Chip 0 0, L1Cache, responseToL1Cache]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn void Sequencer::hitCallback(const CacheMsg&, DataBlock&, GenericMachineType, int) in system/Sequencer.C:552: 0
    117   0  -1        Seq                Done       >       [0x400, line 0x400] 116 cycles NULL LD Yes
Debug: in fn void Sequencer::hitCallback(const CacheMsg&, DataBlock&, GenericMachineType, int) in system/Sequencer.C:587: [0x400, line 0x400]
Debug: in fn void Sequencer::hitCallback(const CacheMsg&, DataBlock&, GenericMachineType, int) in system/Sequencer.C:588: Yes
Debug: in fn void Sequencer::hitCallback(const CacheMsg&, DataBlock&, GenericMachineType, int) in system/Sequencer.C:590: return
    117   0   0    L1Cache      Data_Exclusive     IS>E      [0x400, line 0x400] 
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=117 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 2 enqueuing net msg from inport[0][4] to outport [0][4] time: 187.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 188.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [189, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=117 ]]; ], ]] [Queue from port 6 2 4 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 6
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=117 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 6 enqueuing net msg from inport[2][4] to outport [0][4] time: 189.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 190.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [191, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=117 ]]; ], ]] [Queue from port 8 0 4 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=117 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[0][4] to outport [0][4] time: 191.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 192.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [193, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=117 ]]; ], ]] [Queue from port 9 0 4 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 9
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=117 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 0  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 1  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 9 enqueuing net msg from inport[0][4] to outport [0][4] time: 193.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 194.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [195, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-0 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=140736393540032 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=117 ]]; ], ]] [Chip 0 0, L2Cache, unblockToL2Cache]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
    195   0   0    L2Cache   Exclusive_Unblock  MT_MB>MT     [0x400, line 0x400] 
Debug: in fn bool Sequencer::doRequest(const CacheMsg&) in system/Sequencer.C:911: Fast path miss
    201   1  -1        Seq               Begin       >       [0x400, line 0x400] ST
    205   0   1    L1Cache               Store     NP>IM     [0x400, line 0x400] 
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=205 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 3 enqueuing net msg from inport[0][0] to outport [0][0] time: 275.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 276.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [277, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=205 ]]; ], ]] [Queue from port 6 3 0 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 3 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 6
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=205 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 6 enqueuing net msg from inport[3][0] to outport [0][0] time: 277.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 278.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [279, 2, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=205 ]]; ], ]] [Queue from port 8 0 0 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=205 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[0][0] to outport [0][0] time: 279.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 280.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [281, 2, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=205 ]]; ], ]] [Queue from port 9 0 0 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 9
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=205 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 0  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 1  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 9 enqueuing net msg from inport[0][0] to outport [0][0] time: 281.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 282.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [283, 2, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] OriginalRequestorMachId=L2Cache-0 MessageSize=Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=Yes Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=0 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=205 ]]; ], ]] [Chip 0 0, L2Cache, L1RequestToL2Cache]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
    283   0   0    L2Cache             L1_GETX     MT>MT_MB  [0x400, line 0x400] 
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Request_Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=283 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 1
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 0 enqueuing net msg from inport[0][1] to outport [0][1] time: 287.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 288.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [289, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Request_Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=283 ]]; ], ]] [Queue from port 6 0 1 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 0 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 6
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Request_Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=283 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 1
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 6 enqueuing net msg from inport[0][1] to outport [0][1] time: 289.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 290.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [291, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Request_Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=283 ]]; ], ]] [Queue from port 8 0 1 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Request_Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=283 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 1
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[0][1] to outport [0][1] time: 291.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 292.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [293, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Request_Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=283 ]]; ], ]] [Queue from port 9 0 1 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 9
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Request_Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=283 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 0  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 1  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 1
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 9 enqueuing net msg from inport[0][1] to outport [2][1] time: 293.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 2 my bw 10000 bw spent enqueueing net msg 8000 time: 294.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [295, 1, [RefCnt: [RequestMsg: Address=[0x400, line 0x400] Type=GETX AccessMode=UserMode Requestor=L1Cache-1 Destination=[NetDest (3) 0 0  - 1 0  - 0 0  - ] OriginalRequestorMachId=NULL-32767 MessageSize=Request_Control DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 Prefetch=No Space=NULL RequestSize=0 deltaRequested=0 liveUntilTime=0 memfetch=140736393540016 DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=283 ]]; ], ]] [Chip 0 0, L1Cache, requestToL1Cache]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 9 2 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
    295   0   0    L1Cache            Fwd_GETX      E>I      [0x400, line 0x400] 
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=DATA Sender=L1Cache-0 Destination=[NetDest (3) 0 0  - 0 1  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=13512004288855794688 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=295 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 2 enqueuing net msg from inport[0][3] to outport [0][3] time: 365.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 366.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [367, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=DATA Sender=L1Cache-0 Destination=[NetDest (3) 0 0  - 0 1  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=13512004288855794688 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=295 ]]; ], ]] [Queue from port 6 2 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 6
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 2
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=DATA Sender=L1Cache-0 Destination=[NetDest (3) 0 0  - 0 1  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=13512004288855794688 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=295 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 6 enqueuing net msg from inport[2][3] to outport [0][3] time: 367.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 368.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [369, 2, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=DATA Sender=L1Cache-0 Destination=[NetDest (3) 0 0  - 0 1  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=13512004288855794688 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=295 ]]; ], ]] [Queue from port 8 0 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=DATA Sender=L1Cache-0 Destination=[NetDest (3) 0 0  - 0 1  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=13512004288855794688 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=295 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[0][3] to outport [0][3] time: 369.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 136000 time: 370.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [371, 3, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=DATA Sender=L1Cache-0 Destination=[NetDest (3) 0 0  - 0 1  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=13512004288855794688 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=295 ]]; ], ]] [Queue from port 9 0 3 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 9
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=DATA Sender=L1Cache-0 Destination=[NetDest (3) 0 0  - 0 1  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=13512004288855794688 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=295 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 0  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 1  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 9 enqueuing net msg from inport[0][3] to outport [3][3] time: 371.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 3 my bw 10000 bw spent enqueueing net msg 136000 time: 372.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [373, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=DATA Sender=L1Cache-0 Destination=[NetDest (3) 0 0  - 0 1  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Data Space=NULL RequestSize=0 liveUntilTime=0 memfetch=13512004288855794688 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=295 ]]; ], ]] [Chip 0 1, L1Cache, responseToL1Cache]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn void Sequencer::hitCallback(const CacheMsg&, DataBlock&, GenericMachineType, int) in system/Sequencer.C:552: 0
    373   1  -1        Seq                Done       >       [0x400, line 0x400] 172 cycles NULL ST Yes
Debug: in fn void Sequencer::hitCallback(const CacheMsg&, DataBlock&, GenericMachineType, int) in system/Sequencer.C:587: [0x400, line 0x400]
Debug: in fn void Sequencer::hitCallback(const CacheMsg&, DataBlock&, GenericMachineType, int) in system/Sequencer.C:588: Yes
Debug: in fn void Sequencer::hitCallback(const CacheMsg&, DataBlock&, GenericMachineType, int) in system/Sequencer.C:590: return
    373   0   1    L1Cache       Data_all_Acks     IM>M      [0x400, line 0x400] 
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 2 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:259: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:260: scheduled again
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 9 3 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=21325648 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=373 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 3 enqueuing net msg from inport[0][4] to outport [0][4] time: 443.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 444.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [445, 1, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=21325648 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=373 ]]; ], ]] [Queue from port 6 3 4 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 3 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 6
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 3
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=21325648 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=373 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 6 enqueuing net msg from inport[3][4] to outport [0][4] time: 445.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 446.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [447, 2, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=21325648 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=373 ]]; ], ]] [Queue from port 8 0 4 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 6 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 8
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=21325648 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=373 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 1  - 1 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 0  - 1 1  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 8 enqueuing net msg from inport[0][4] to outport [0][4] time: 447.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 448.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [449, 2, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=21325648 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=373 ]]; ], ]] [Queue from port 9 0 4 to PerfectSwitch]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 8 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:155: m_switch_id is 9
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:200: incoming is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:205: *net_msg_ptr is [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=21325648 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=373 ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 1 0  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 1  - 0 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 1 0  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:245: m_routing_table[link] is [NetDest (3) 0 0  - 0 1  - 0 0  - ]
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:272: checking if node is blocked
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:273: outgoing is 0
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:274: vnet is 4
Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:275: enough is 1

Debug: in fn virtual void PerfectSwitch::wakeup() in network/simple/PerfectSwitch.C:316: switch: 9 enqueuing net msg from inport[0][4] to outport [0][4] time: 449.


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:192: throttle: 0 my bw 10000 bw spent enqueueing net msg 8000 time: 450.
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:201: [MessageBuffer:  consumer-yes [PrioHeap: [451, 2, [RefCnt: [ResponseMsg: Address=[0x400, line 0x400] Type=EXCLUSIVE_UNBLOCK Sender=L1Cache-1 Destination=[NetDest (3) 1 0  - 0 0  - 0 0  - ] DataBlk=0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ] Dirty=0 AckCount=0 MessageSize=Response_Control Space=NULL RequestSize=0 liveUntilTime=0 memfetch=21325648 mfset= DirtyMask=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 Time=373 ]]; ], ]] [Chip 0 0, L2Cache, unblockToL2Cache]


Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:256: [Throttle: 9 0 bw: 10000]
Debug: in fn virtual void Throttle::wakeup() in network/simple/Throttle.C:257: not scheduled again
    451   0   0    L2Cache   Exclusive_Unblock  MT_MB>MT     [0x400, line 0x400] 
